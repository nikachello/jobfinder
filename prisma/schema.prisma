datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

enum UserType {
    JOB_SEEKER
    COMPANY
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  stripeCustomerId String? @unique

  userType UserType?

  onBoardingCompleted Boolean @default(false)

  Company Company? 
  JobSeeker JobSeeker?

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
    id String @id @default(cuid())
    name String
    location String
    about String
    logo String
    website String

    JobPost JobPost[]

    user User @relation(fields: [userId], references: [id])
    userId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model JobSeeker {
    id String @id @default(cuid())
    name String
    about String
    resume String

    user User @relation(fields: [userId], references: [id])
    userId String @unique


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model JobPost {
  id String @id @default(cuid())

  jobTitle String
  employmentType String
  location String
  salaryFrom Int?
  salaryTo Int?
  salaryNotProposed Boolean?
  jobDescription String
  listingDuration Int
  benefits String[]

  status JobPostStatus @default(DRAFT)

  Company Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updated DateTime @updatedAt
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}